/**
 * –°–∫—Ä–∏–ø—Ç: updateWeeklyStats_All
 * –ò—Å—Ç–æ—á–Ω–∏–∫: https://chatgpt.com/c/67e6c8e4-bbc8-8010-a819-2d00335dd323
 * @version v1.6.3 ‚Äî –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –≤—Å—Ç–∞–≤–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –Ω–µ–¥–µ–ª—å –∑–∞ –æ–¥–∏–Ω –ø—Ä–æ—Ö–æ–¥
 * –†–ê–ë–û–¢–ê–ï–¢ –ü–†–û–í–ï–†–ï–ù–û
 * üîÑ –õ–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π:
 * v1.6.3 (2025-03-28)
 * - –í—Å—Ç–∞–≤–∫–∞ —Å—Ç–æ–ª–±—Ü–æ–≤ –≤–ø–µ—Ä—ë–¥ —Å—Ä–∞–∑—É –Ω–∞ –≤—Å–µ –Ω–µ–¥–µ–ª–∏, —Å–¥–≤–∏–≥ –∑–Ω–∞—á–µ–Ω–∏–π –≤–ø—Ä–∞–≤–æ
 * - –î–∞–Ω–Ω—ã–µ –ø–∏—à—É—Ç—Å—è –≤ –Ω—É–∂–Ω—ã–π —Å—Ç–æ–ª–±–µ—Ü –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Ç–µ—Ä–∞—Ü–∏–∏
 */

function updateWeeklyStats_All() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sourceSheet = ss.getSheetByName("–ù–∏—à–∏ 2.0");
  const statSheet = ss.getSheetByName("s5 –°—Ç–∞—Ç–∞");
  const timezone = ss.getSpreadsheetTimeZone();

  const standardParams = [
    { name: "–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ", column: "H" },
    { name: "–ù–∞–ø–∏—Å–∞–Ω–æ", column: "AG" },
    { name: "–ó–∞–ø—É—â–µ–Ω–æ –≤ —Ä–∞–±–æ—Ç—É", column: "D" }
  ];

  const top10Params = [
    { name: "–í –¢–æ–ø-10 —è–Ω–¥–µ–∫—Å–∞", column: "K" },
    { name: "–í –¢–æ–ø-10 —è–Ω–¥–µ–∫—Å–∞ —á–µ—Ä–µ–∑ 2 –Ω–µ–¥–µ–ª–∏", column: "L" },
    { name: "–í –¢–æ–ø-10 Google —á–µ—Ä–µ–∑ –º–µ—Å—è—Ü", column: "M" }
  ];

  const paramStartRow = 8;
  const lastRow = statSheet.getLastRow();
  const paramNames = statSheet.getRange(paramStartRow, 2, lastRow - paramStartRow + 1).getValues().flat();

  const today = new Date();
  const getWeekStart = (date) => {
    const d = new Date(date);
    d.setDate(d.getDate() - d.getDay() + 1);
    d.setHours(0, 0, 0, 0);
    return d;
  };

  const formatDateShort = date => Utilities.formatDate(date, timezone, "dd");
  const formatDateFull = date => Utilities.formatDate(date, timezone, "dd.MM.yy");
  const getWeekLabel = (startDate) => {
    const endDate = new Date(startDate);
    endDate.setDate(startDate.getDate() + 6);
    return `${formatDateShort(startDate)}‚Äì${formatDateFull(endDate)}`;
  };
  const applyWeekStyle = (cellRange, startDate) => {
    cellRange.setFontWeight("bold");
    const endDate = new Date(startDate);
    endDate.setDate(startDate.getDate() + 6);
    if (startDate.getMonth() !== endDate.getMonth()) {
      cellRange.setBackground("#b6d7a8");
    } else {
      cellRange.setBackground(null);
    }
  };

  const currentWeekStart = getWeekStart(today);
  const checkIfEmptyLast3 = (paramList) => {
    return paramList.every(param => {
      const rowIndex = paramNames.findIndex(name => name === param.name);
      if (rowIndex === -1) return false;
      const row = paramStartRow + rowIndex;
      const values = statSheet.getRange(row, 3, 1, 3).getValues()[0];
      return values.every(cell => !cell);
    });
  };

  const isFirstRun = checkIfEmptyLast3([...standardParams, ...top10Params]);
  const fillWeeks = isFirstRun ? 16 : 1;

  // –í—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±—Ü—ã –∑–∞—Ä–∞–Ω–µ–µ
  statSheet.insertColumnsBefore(3, fillWeeks);

  const sourceData = sourceSheet.getDataRange().getValues();

  for (let i = 0; i < fillWeeks; i++) {
    const weekStart = new Date(currentWeekStart);
    weekStart.setDate(weekStart.getDate() - i * 7);
    const weekLabel = getWeekLabel(weekStart);
    const weekEnd = new Date(weekStart);
    weekEnd.setDate(weekStart.getDate() + 6);

    const col = 3 + i;
    const headerCell = statSheet.getRange(7, col);
    headerCell.setValue(weekLabel);
    applyWeekStyle(headerCell, weekStart);

    [...standardParams, ...top10Params].forEach(param => {
      const rowIndex = paramNames.findIndex(name => name === param.name);
      if (rowIndex === -1) return;
      const row = paramStartRow + rowIndex;
      let count = 0;

      for (let r = 1; r < sourceData.length; r++) {
        const line = sourceData[r];
        const rawValue = line[getColIndex(param.column)];
        let compareDate = line[getColIndex("H")];

        if (standardParams.some(p => p.name === param.name)) {
          compareDate = rawValue;
          if (!(compareDate instanceof Date)) continue;
        } else {
          if (rawValue !== 1 && rawValue !== "1") continue;
          if (!(compareDate instanceof Date)) continue;
        }

        const d = new Date(compareDate);
        d.setHours(0, 0, 0, 0);
        if (d >= weekStart && d <= weekEnd) {
          count++;
        }
      }

      const value = (top10Params.some(p => p.name === param.name) && count === 0) ? "–Ω–µ—Ç –∏–Ω—Ñ—ã" : count;
      statSheet.getRange(row, col).setValue(value);
    });
  }

  function getColIndex(colLetter) {
    return colLetter.charCodeAt(0) - 65;
  }
}
